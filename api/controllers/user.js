// This controller will inherit CRUD actions from its base controller implementation
// Go ahead and try to POST a new user to /user

var config = require('../../config/config.js');
 
function verifyEmail(req, email, cb){
	req.app.models.user.findOne({'email': email}, function (err, user) {
        if (err)
            cb(err);
        else
        	cb(null, user);
	});
}
	
// callback of callback :(
function sendEmail(req, cb){
	var email = req.param('email');
	verifyEmail(req, email, function(err, user){
		if(err || !user)
		   cb(err||new Error(), {errId: 'email address not exist', err: err});
		else{
			console.log("send email out to" + email);
			var accessToken = Service.token.sign({email: email, expiryAt: new Date().getTime() + config.nodemailer.password_expiry_ms });
		       
    		var email = {'from' : config.nodemailer.from,
    				'to' :		email,
    				'subject' : config.nodemailer.passwordReset_subject,
    				'html' : 'hello from boxychat, this is your password reset link: ' + accessToken,
    		};  
    		
    		Service.mail.send(email, function(err, response){
    			if(err)
    				 cb(err, {errId: 'fail to send email', err: err});
    			else{
    				 cb(null, {access_token: accessToken});
    			}
    		});
			
		}	
	});	
}

module.exports = {
    model: 'user', // If no model is specified, CRUD actions won't be inherited
    actions: {
        // Custom actions can be added
        // The action keys must be in this format:
        // 'verb /route'
        'get /hello': function (req, res, next) {
            res.send('Hello world!');
        },
        
        'get /forgotpassword': function(req, res, next){
        	var cb = function(err, msg){
        		if(err)
        			return res.json({status: 'error', data: msg});
        		else	     			
        			return res.json({status: 'success', data: msg});
        	};
        	
        	sendEmail(req, cb);
        },
        
        //this API is protected by the access token generated by /forgotpassword API
        //assume the token is verified already
        'post /passwordReset' : function(req, res, next){
        	var email = req.param('email');
        	var pass = req.param('password');
        	var confirm = req.param('confirm');
        	
        	Service.crypt.generate({saltComplexity: 10}, pass, function (err, hash) {
        		console.log("password for " + email + "is reset");
        		req.app.models.user.update({email: email}, {password: hash}, function(err, model){
        			if(err) return res.json(500, { err: err });
        		    res.json(model);
        		});
        	});
        },
        
        // Override the inherited read action
        'get /:id': function(req, res, next){
            var err = new Error('Not authorized!');
            err.status = 401;
            next(err);
        },       
    }
};